import os
from flask import Flask, request
from dotenv import load_dotenv
import telebot
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")

# –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
print(f"‚úÖ TELEGRAM_TOKEN loaded: {bool(TELEGRAM_TOKEN)}")
print(f"‚úÖ OPENAI_API_KEY loaded: {bool(OPENAI_API_KEY)}")
print(f"‚úÖ ASSISTANT_ID loaded: {bool(ASSISTANT_ID)}")

openai.api_key = OPENAI_API_KEY

app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

@app.route("/", methods=["GET"])
def index():
    return "‚úÖ Bot is alive", 200

@app.route("/", methods=["POST"])
def webhook():
    print("üîî Webhook –≤—ã–∑–≤–∞–Ω!")
    if request.headers.get("Content-Type") != "application/json":
        print("‚ùå Content-Type –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", request.headers.get("Content-Type"))
        return "Invalid Content-Type", 400

    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK", 200

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}: {message.text}")

    try:
        thread = openai.beta.threads.create()
        print(f"üßµ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread: {thread.id}")

        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=message.text
        )

        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )

        print(f"‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω run: {run.id}, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

        while True:
            run_status = openai.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                break

        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        response = messages.data[0].content[0].text.value
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:", response)

        bot.send_message(message.chat.id, response)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
